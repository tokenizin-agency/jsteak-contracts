{
  "contract_name": "hub-tf",
  "contract_version": "3.0.17",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "type": "object",
    "required": [
      "denom",
      "epoch_period",
      "fee_account",
      "fee_account_type",
      "fee_amount",
      "max_fee_amount",
      "owner",
      "steak_denom",
      "token_factory",
      "unbond_period",
      "validators"
    ],
    "properties": {
      "denom": {
        "description": "denomination of coins to steak (uXXXX)",
        "type": "string"
      },
      "dust_collector": {
        "description": "The Dust collector contract",
        "type": [
          "string",
          "null"
        ]
      },
      "epoch_period": {
        "description": "How often the un-bonding queue is to be executed, in seconds",
        "type": "integer",
        "format": "uint64",
        "minimum": 0.0
      },
      "fee_account": {
        "description": "Fee Account to send fees too",
        "type": "string"
      },
      "fee_account_type": {
        "description": "type of fee account",
        "type": "string"
      },
      "fee_amount": {
        "description": "Fee \"1.00 = 100%\"",
        "allOf": [
          {
            "$ref": "#/definitions/Decimal"
          }
        ]
      },
      "max_fee_amount": {
        "description": "Max Fee \"1.00 = 100%\"",
        "allOf": [
          {
            "$ref": "#/definitions/Decimal"
          }
        ]
      },
      "owner": {
        "description": "Account who can call certain privileged functions",
        "type": "string"
      },
      "steak_denom": {
        "description": "denomination of the steak token (eg steakLuna)",
        "type": "string"
      },
      "token_factory": {
        "type": "string"
      },
      "unbond_period": {
        "description": "The staking module's un-bonding time, in seconds",
        "type": "integer",
        "format": "uint64",
        "minimum": 0.0
      },
      "validators": {
        "description": "Initial set of validators who will receive the delegations",
        "type": "array",
        "items": {
          "type": "string"
        }
      }
    },
    "additionalProperties": false,
    "definitions": {
      "Decimal": {
        "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
        "type": "string"
      }
    }
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "oneOf": [
      {
        "description": "Bond specified amount of Luna",
        "type": "object",
        "required": [
          "bond"
        ],
        "properties": {
          "bond": {
            "type": "object",
            "properties": {
              "exec_msg": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "receiver": {
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Bond specified amount of Luna",
        "type": "object",
        "required": [
          "unbond"
        ],
        "properties": {
          "unbond": {
            "type": "object",
            "properties": {
              "receiver": {
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Withdraw Luna that have finished un-bonding in previous batches",
        "type": "object",
        "required": [
          "withdraw_unbonded"
        ],
        "properties": {
          "withdraw_unbonded": {
            "type": "object",
            "properties": {
              "receiver": {
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Withdraw Luna that has finished unbonding in previous batches, for given address",
        "type": "object",
        "required": [
          "withdraw_unbonded_admin"
        ],
        "properties": {
          "withdraw_unbonded_admin": {
            "type": "object",
            "required": [
              "address"
            ],
            "properties": {
              "address": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Add a validator to the whitelist; callable by the owner",
        "type": "object",
        "required": [
          "add_validator"
        ],
        "properties": {
          "add_validator": {
            "type": "object",
            "required": [
              "validator"
            ],
            "properties": {
              "validator": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Remove a validator from the whitelist; callable by the owner",
        "type": "object",
        "required": [
          "remove_validator"
        ],
        "properties": {
          "remove_validator": {
            "type": "object",
            "required": [
              "validator"
            ],
            "properties": {
              "validator": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Remove a validator from the whitelist; callable by the owner. Does not undelegate. use for typos",
        "type": "object",
        "required": [
          "remove_validator_ex"
        ],
        "properties": {
          "remove_validator_ex": {
            "type": "object",
            "required": [
              "validator"
            ],
            "properties": {
              "validator": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Pause a validator from accepting new delegations",
        "type": "object",
        "required": [
          "pause_validator"
        ],
        "properties": {
          "pause_validator": {
            "type": "object",
            "required": [
              "validator"
            ],
            "properties": {
              "validator": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Unpause a validator from accepting new delegations",
        "type": "object",
        "required": [
          "un_pause_validator"
        ],
        "properties": {
          "un_pause_validator": {
            "type": "object",
            "required": [
              "validator"
            ],
            "properties": {
              "validator": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Transfer ownership to another account; will not take effect unless the new owner accepts",
        "type": "object",
        "required": [
          "transfer_ownership"
        ],
        "properties": {
          "transfer_ownership": {
            "type": "object",
            "required": [
              "new_owner"
            ],
            "properties": {
              "new_owner": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Accept an ownership transfer",
        "type": "object",
        "required": [
          "accept_ownership"
        ],
        "properties": {
          "accept_ownership": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Claim staking rewards, swap all for Luna, and restake",
        "type": "object",
        "required": [
          "harvest"
        ],
        "properties": {
          "harvest": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Use redelegations to balance the amounts of Luna delegated to validators",
        "type": "object",
        "required": [
          "rebalance"
        ],
        "properties": {
          "rebalance": {
            "type": "object",
            "required": [
              "minimum"
            ],
            "properties": {
              "minimum": {
                "$ref": "#/definitions/Uint128"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "redelegate stake from one validator to another",
        "type": "object",
        "required": [
          "redelegate"
        ],
        "properties": {
          "redelegate": {
            "type": "object",
            "required": [
              "validator_from",
              "validator_to"
            ],
            "properties": {
              "validator_from": {
                "type": "string"
              },
              "validator_to": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Update Luna amounts in unbonding batches to reflect any slashing or rounding errors",
        "type": "object",
        "required": [
          "reconcile"
        ],
        "properties": {
          "reconcile": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Submit the current pending batch of unbonding requests to be unbonded",
        "type": "object",
        "required": [
          "submit_batch"
        ],
        "properties": {
          "submit_batch": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Set unbond period",
        "type": "object",
        "required": [
          "set_unbond_period"
        ],
        "properties": {
          "set_unbond_period": {
            "type": "object",
            "required": [
              "unbond_period"
            ],
            "properties": {
              "unbond_period": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Transfer Fee collection account to another account",
        "type": "object",
        "required": [
          "transfer_fee_account"
        ],
        "properties": {
          "transfer_fee_account": {
            "type": "object",
            "required": [
              "fee_account_type",
              "new_fee_account"
            ],
            "properties": {
              "fee_account_type": {
                "type": "string"
              },
              "new_fee_account": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Update fee collection amount",
        "type": "object",
        "required": [
          "update_fee"
        ],
        "properties": {
          "update_fee": {
            "type": "object",
            "required": [
              "new_fee"
            ],
            "properties": {
              "new_fee": {
                "$ref": "#/definitions/Decimal"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Callbacks; can only be invoked by the contract itself",
        "type": "object",
        "required": [
          "callback"
        ],
        "properties": {
          "callback": {
            "$ref": "#/definitions/CallbackMsg"
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Set Dust Collector Contract",
        "type": "object",
        "required": [
          "set_dust_collector"
        ],
        "properties": {
          "set_dust_collector": {
            "type": "object",
            "properties": {
              "dust_collector": {
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Collect the Dust",
        "type": "object",
        "required": [
          "collect_dust"
        ],
        "properties": {
          "collect_dust": {
            "type": "object",
            "required": [
              "max_tokens"
            ],
            "properties": {
              "max_tokens": {
                "type": "integer",
                "format": "uint32",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Return the Dust in shiny 'base denom'",
        "type": "object",
        "required": [
          "return_denom"
        ],
        "properties": {
          "return_denom": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "admin: setBaseDenom - in case you muck up the init and need to change it",
        "type": "object",
        "required": [
          "set_base_denom"
        ],
        "properties": {
          "set_base_denom": {
            "type": "object",
            "required": [
              "new_denom"
            ],
            "properties": {
              "new_denom": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "change tokenfactory type (ADMIN only)",
        "type": "object",
        "required": [
          "change_token_factory"
        ],
        "properties": {
          "change_token_factory": {
            "type": "object",
            "required": [
              "token_factory_type"
            ],
            "properties": {
              "token_factory_type": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "CallbackMsg": {
        "oneOf": [
          {
            "description": "Following the swaps, stake the Luna acquired to the whitelisted validators",
            "type": "object",
            "required": [
              "reinvest"
            ],
            "properties": {
              "reinvest": {
                "type": "object"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Decimal": {
        "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
        "type": "string"
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "oneOf": [
      {
        "description": "The contract's configurations. Response: `ConfigResponse`",
        "type": "object",
        "required": [
          "config"
        ],
        "properties": {
          "config": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "The contract's current state. Response: `StateResponse`",
        "type": "object",
        "required": [
          "state"
        ],
        "properties": {
          "state": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "The current batch on unbonding requests pending submission. Response: `PendingBatch`",
        "type": "object",
        "required": [
          "pending_batch"
        ],
        "properties": {
          "pending_batch": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Query an individual batch that has previously been submitted for unbonding but have not yet fully withdrawn. Response: `Batch`",
        "type": "object",
        "required": [
          "previous_batch"
        ],
        "properties": {
          "previous_batch": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Enumerate all previous batches that have previously been submitted for unbonding but have not yet fully withdrawn. Response: `Vec<Batch>`",
        "type": "object",
        "required": [
          "previous_batches"
        ],
        "properties": {
          "previous_batches": {
            "type": "object",
            "properties": {
              "limit": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint32",
                "minimum": 0.0
              },
              "start_after": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Enumerate all outstanding unbonding requests in a given batch. Response: `Vec<UnbondRequestsResponseByBatchItem>`",
        "type": "object",
        "required": [
          "unbond_requests_by_batch"
        ],
        "properties": {
          "unbond_requests_by_batch": {
            "type": "object",
            "required": [
              "id"
            ],
            "properties": {
              "id": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              },
              "limit": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint32",
                "minimum": 0.0
              },
              "start_after": {
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Enumerate all outstanding unbonding requests from given a user. Response: `Vec<UnbondRequestsByUserResponseItem>`",
        "type": "object",
        "required": [
          "unbond_requests_by_user"
        ],
        "properties": {
          "unbond_requests_by_user": {
            "type": "object",
            "required": [
              "user"
            ],
            "properties": {
              "limit": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint32",
                "minimum": 0.0
              },
              "start_after": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint64",
                "minimum": 0.0
              },
              "user": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ]
  },
  "migrate": null,
  "sudo": null,
  "responses": {
    "config": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ConfigResponse",
      "type": "object",
      "required": [
        "denom",
        "epoch_period",
        "fee_account",
        "fee_rate",
        "fee_type",
        "max_fee_rate",
        "owner",
        "paused_validators",
        "steak_token",
        "unbond_period",
        "validators"
      ],
      "properties": {
        "denom": {
          "description": "denomination of coins to steak (uXXXX)",
          "type": "string"
        },
        "dust_collector": {
          "type": [
            "string",
            "null"
          ]
        },
        "epoch_period": {
          "description": "How often the unbonding queue is to be executed, in seconds",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "fee_account": {
          "description": "Fee Account to send fees too",
          "type": "string"
        },
        "fee_rate": {
          "description": "Fee \"1.00 = 100%\"",
          "allOf": [
            {
              "$ref": "#/definitions/Decimal"
            }
          ]
        },
        "fee_type": {
          "description": "type of account to send the fees too",
          "type": "string"
        },
        "max_fee_rate": {
          "description": "Max Fee \"1.00 = 100%\"",
          "allOf": [
            {
              "$ref": "#/definitions/Decimal"
            }
          ]
        },
        "new_owner": {
          "description": "Pending ownership transfer, awaiting acceptance by the new owner",
          "type": [
            "string",
            "null"
          ]
        },
        "owner": {
          "description": "Account who can call certain privileged functions",
          "type": "string"
        },
        "paused_validators": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "steak_token": {
          "description": "Address of the Steak token",
          "type": "string"
        },
        "token_factory": {
          "type": [
            "string",
            "null"
          ]
        },
        "unbond_period": {
          "description": "The staking module's unbonding time, in seconds",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "validators": {
          "description": "Set of validators who will receive the delegations",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "definitions": {
        "Decimal": {
          "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
          "type": "string"
        }
      }
    },
    "pending_batch": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "PendingBatch",
      "type": "object",
      "required": [
        "est_unbond_start_time",
        "id",
        "usteak_to_burn"
      ],
      "properties": {
        "est_unbond_start_time": {
          "description": "Estimated time when this batch will be submitted for unbonding",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "id": {
          "description": "ID of this batch",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "usteak_to_burn": {
          "description": "Total amount of `usteak` to be burned in this batch",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        }
      },
      "definitions": {
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "previous_batch": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Batch",
      "type": "object",
      "required": [
        "amount_unclaimed",
        "est_unbond_end_time",
        "id",
        "reconciled",
        "total_shares"
      ],
      "properties": {
        "amount_unclaimed": {
          "description": "Amount of `denom` in this batch that have not been claimed",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "est_unbond_end_time": {
          "description": "Estimated time when this batch will finish unbonding",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "id": {
          "description": "ID of this batch",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "reconciled": {
          "description": "Whether this batch has already been reconciled",
          "type": "boolean"
        },
        "total_shares": {
          "description": "Total amount of shares remaining this batch. Each `usteak` burned = 1 share",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        }
      },
      "definitions": {
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "previous_batches": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Array_of_Batch",
      "type": "array",
      "items": {
        "$ref": "#/definitions/Batch"
      },
      "definitions": {
        "Batch": {
          "type": "object",
          "required": [
            "amount_unclaimed",
            "est_unbond_end_time",
            "id",
            "reconciled",
            "total_shares"
          ],
          "properties": {
            "amount_unclaimed": {
              "description": "Amount of `denom` in this batch that have not been claimed",
              "allOf": [
                {
                  "$ref": "#/definitions/Uint128"
                }
              ]
            },
            "est_unbond_end_time": {
              "description": "Estimated time when this batch will finish unbonding",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "id": {
              "description": "ID of this batch",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "reconciled": {
              "description": "Whether this batch has already been reconciled",
              "type": "boolean"
            },
            "total_shares": {
              "description": "Total amount of shares remaining this batch. Each `usteak` burned = 1 share",
              "allOf": [
                {
                  "$ref": "#/definitions/Uint128"
                }
              ]
            }
          }
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "state": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "StateResponse",
      "type": "object",
      "required": [
        "exchange_rate",
        "total_native",
        "total_usteak",
        "unlocked_coins"
      ],
      "properties": {
        "exchange_rate": {
          "description": "The exchange rate between usteak and native, in terms of native per usteak",
          "allOf": [
            {
              "$ref": "#/definitions/Decimal"
            }
          ]
        },
        "total_native": {
          "description": "Total amount of native staked",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "total_usteak": {
          "description": "Total supply to the Steak token",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "unlocked_coins": {
          "description": "Staking rewards currently held by the contract that are ready to be reinvested",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Coin"
          }
        }
      },
      "definitions": {
        "Coin": {
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "denom": {
              "type": "string"
            }
          }
        },
        "Decimal": {
          "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
          "type": "string"
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "unbond_requests_by_batch": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "UnbondRequestsByBatchResponseItem",
      "type": "object",
      "required": [
        "shares",
        "user"
      ],
      "properties": {
        "shares": {
          "description": "The user's share in the batch",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "user": {
          "description": "The user's address",
          "type": "string"
        }
      },
      "definitions": {
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "unbond_requests_by_user": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Array_of_UnbondRequestsByUserResponseItem",
      "type": "array",
      "items": {
        "$ref": "#/definitions/UnbondRequestsByUserResponseItem"
      },
      "definitions": {
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "UnbondRequestsByUserResponseItem": {
          "type": "object",
          "required": [
            "id",
            "shares"
          ],
          "properties": {
            "id": {
              "description": "ID of the batch",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "shares": {
              "description": "The user's share in the batch",
              "allOf": [
                {
                  "$ref": "#/definitions/Uint128"
                }
              ]
            }
          }
        }
      }
    }
  }
}
